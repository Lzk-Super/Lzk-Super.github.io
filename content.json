[{"title":"Java的跨平台原理","slug":"Java的跨平台原理","date":"2019-08-21T05:13:33.000Z","updated":"2019-08-21T05:18:04.031Z","comments":true,"path":"2019/08/21/Java的跨平台原理/","link":"","permalink":"http://yoursite.com/2019/08/21/Java的跨平台原理/","excerpt":"","text":"1、是么是平台 Java是可以跨平台的编程语言，那我们首先得知道什么是平台，我们把CPU处理器与操作系统的整体叫平台。 CPU大家都知道，如果计算机是人,那CPU就是人的大脑，它既负责思维运算，又负责身体各部件的命令控制。CPU的种类很多，除去我们熟知的Intel与AMD外，还有比如上面说到的SUN的Sparc,比如IBM的PowerPC等等，这些各个公司生产的CPU使用或相同或不同的指令集。指令集就是cpu中用来计算和控制计算机系统的一套指令的集合。指令集又分为精简指令集（RISC）与复杂指令集(CISC)，每种cpu都有其特定的指令集。开发程序，首先要知道该程序在什么CPU上运行,也就是要知道CPU所使用的指令集。 下面说操作系统，操作系统是充当用户和计算机之间交互的界面软件，不同的操作系统支持不同的CPU，严格意义上说是不同的操作系统支持不同CPU的指令集。例如 windows和liunx都支持Intel和AMD的复杂指令集，但并不支持PowerPC所使用的精简指令集，而早期的MAC电脑使用的是PowerPC处理器，所以也就无法在MAC下直接安装windows,直到05年MAC改用了Intel的CPU,才使在MAC下安装windows成为可能。但问题来了，原来的MAC 操作系统也只支持PowerPC,在Intel上也不能安装，怎么办？所以苹果公司也得重写自己的MAC操作系统以支持这种变化。最后总结下，我们要知道，不同的操作系统支持不同的CPU指令集，现在的windows,liunx,mac,solaris都支持Intel与AMD的CPU指令集。 有了上面的铺垫，旺旺老师就要告诉大家，如果您要开发程序，首先应该确定：1，CPU类型，也就是指令集类型；2，操作系统；我们把这种软硬件的结合叫平台。也可以说“平台= CPU+OS”。又因为现在主流的操作系统都支持主流的CPU，所以有时也把操作系统称为平台。 知道什么是平台，我们看Java跨平台原理。 2、Java跨平台原理 首先看一张与C语言有关的图： {% asset_img 1.jpg [12] %} 如果您有过C的开发经历，这张图看起来将非常轻松。我们知道，只要是用标准C开发的程序，使用不同的编译器编译后的可执行文件是可以在对应平台运行的，比如windows可以使用VC编译，那编译后的exe文件就可以在windows下运行；liunx下可以使用GCC编译，生成的可执行文件就可以在Liunx上运行。到这里请大家思考一个问题：“VC编译的exe能在Liunx上运行吗？” 答案肯定是否定的。使用特定编译器编译的程序只能在对应的平台运行，这里也可以说编译器是与平台相关的，编译后的文件也是与平台相关的。我们说的语言跨平台是编译后的文件跨平台，而不是源程序跨平台，如果是源程序，任何一门语言都是跨平台的语言了。这个如果您不明白，看下面一个案例： 比 如火星真的有外星人（并且毋庸置疑，火星是韩国人的，火星文也一定是韩国人发明的），就像我们观察蚂蚁一样，火星人默默的观察着我们，有一天，当人类做的 什么事情让火星人实在是看不下去了（比如旺旺老师的书出版了你不买，哈哈，呕吐中，没关系，吐啊吐啊就吐习惯了），所以决定来地球教育我们，但有一个问 题，火星人只会说火星文，地球人理解不了，怎么办啊？找翻译呗（也许非主流可以帮忙，玩笑）！由中文翻译把火星文翻译为中文，英文翻译把火星文翻译为英文 等等等等，但这样问题来了，中文翻译翻译的东西只有中国人能听懂，美国人法国人根本不明白，英文翻译翻译的文章中国人也不明白，也就是语言不能跨平台。 那上例中，火星文就是C语言，各个国家是平台，中文翻译英文翻译就是对应平台的编译器，编译后的文章就是可执行文件。虽然源文章火星文是与平台无关的，但翻译器是与特定国家相关的，翻译后的文章也是与特定国家相关的。 接下来思考另一个问题“怎么让火星文跨平台呢？” 火 星人想到了地球上有世界语，于是首先把自己的文章翻译为世界语；世界语各国人当然看不懂，没关系，火星人又给每个国家配备了一个世界语到本地语的翻译，这 样火星文只要翻译一次（翻译为世界语），就可以到各个国家运行了。还要记住，这个过程火星人要提供两个组件，第一是火星文到世界语的翻译，第二是世界语到 对应本地语言的翻译。如下图： 有了上面案例的积累，我们也知道了语言跨平台原理：“不能编译成机器语言，因为那样就与平台相关了，编译为中间语言，再由解释器二次编译，解释执行。”如下是Java跨平台原理表示图： 上图中的.java就是源程序，类似于c语言的.c,生成的中间码是.class,这个既是我们上文中说的中间语，各个平台解释器就是各种国家翻译。 接下来我们再比较下两种方式的差异：第一，C语言是编译执行的，编译器与平台相关，编译生成的可执行文件与平台相关；第二，Java是解释执行的，编译为中间码的编译器与平台无关，编译生成的中间码也与平台无关（一次编译，到处运行），中间码再由解释器解释执行，解释器是与平台相关的，也就是不同的平台需要不同的解释器. 这里再说下语言根据执行方式的不同分类：第一是编译执行，如上文中说到的C，它把源程序由特定平台的编译器一次性编译为平台相关的机器码,它的优点是执行速度快，缺点是无法跨平台；第二是解释执行，如HTML,JavaScript，它使用特定的解释器，把代码一行行解释为机器码，类似于同声翻译，它的优点是可以跨平台，缺点是执行速度慢，暴露源程序；第三种是从Java开始引入的“中间码+虚拟机”的方式，它既整合了编译语言与解释语言的优点，同时如虚拟机又可以解决如垃圾回收，安全性检查等这些传统语言头疼的问题，所以其后微软的.NET平台也使用的这种方式。","categories":[],"tags":[]},{"title":"面向对象基本特征和原则","slug":"面向对象基本特征和原则","date":"2019-08-21T05:03:56.000Z","updated":"2019-08-21T05:12:22.572Z","comments":true,"path":"2019/08/21/面向对象基本特征和原则/","link":"","permalink":"http://yoursite.com/2019/08/21/面向对象基本特征和原则/","excerpt":"","text":"一、三大基本特征：封装、继承、多态 1、封装 封装就是隐藏对象的属性和实现细节，仅对外公开接口，控制在程序中属性的读和修改的访问级别，将抽象得到的数据和行为（或功能）相结合，形成一个有机的整体， 也就是将数据与操作数据的源代码进行有机的结合，形成“类”，其中数据和函数都是类的成员。 封装的目的是增强安全性和简化编程，使用者不必了解具体的实现细节，而只是要通过外部接口，以特定的访问权限来使用类的成员。 面相对象的不就是使用程序处理事情时以对象为中心去分析吗，与面向过程不同，面向过程关心处理的逻辑、流程等问题，而不关心事件主体。而面向对象即面向主体， 所以我们在解决问题时应该先进行对象的封装（对象是封装类的实例，比如张三是人，人是一个封装类，张三只是对象中的一个实例、一个对象）。比如我们日常生活中的 小兔子、小绵羊都可以封装为一个类。 比如兔子的属性有两只耳朵、四只腿、一双眼睛、三瓣嘴等；行为（功能）有跑、跳、吃素等。 2、继承 继承是面向对象的基本特征之一，继承机制允许创建分等级层次的类。继承就是子类继承父类的特征和行为，使得子类对象（实例）具有父类的实例域和方法，或子类 从父类继承方法，使得子类具有父类相同的行为。类似下面这个图： 我们在上面已经封装了兔子这个类，其他动物也一样可以进行封装。在封装过程中我们发现兔子、绵羊这两个类具有相似的功能或特性如吃草，所以我们可以抽取共有 特征和方法形成高一层的类，如这里的食草动物、食肉动物。继承之间是子父类的关系。继承机制可以很好的描述一个类的生态，也提高了代码复用率，在Java中的Object 类是所有类的超类，常称作上帝类 3、多态 多态同一个行为具有多个不同表现形式或形态的能力。是指一个类实例（对象）的相同方法在不同情形有不同表现形式。多态机制使具有不同内部结构的对象可以共享 相同的外部接口。这意味着，虽然针对不同对象的具体操作不同，但通过一个公共的类，它们（那些操作）可以通过相同的方式予以调用。 多态的优点： 1. 消除类型之间的耦合关系 2. 可替换性 3. 可扩充性 4. 接口性 5. 灵活性 6. 简化性 多态存在的三个必要条件： 继承 重写（子类继承父类后对父类方法进行重新定义） 父类引用指向子类对象 简言之，多态其实是在继承的基础上的。比如说今天我们要去动物园参观动物，那么你说我们去参观兔子、参观绵羊、参观狮子、参观豹子都是对的，但你不能说我们去参观汽车。 在这个例子中，子类具有多态性：除了使用自己的身份，还能充当父类。 二、五大基本原则 1、单一职责原则（SRP） 一个类应该有且只有一个去改变它的理由，这意味着一个类应该只有一项工作。 比如在职员类里，将工程师、销售人员、销售经理这些情况都放在职员类里考虑，其结果将会非常混乱，在这个假设下，职员类里的每个方法都要if else判断是哪种情况，从类结构上来说将会十分臃肿。 2、开放封闭原则（OCP） 对象或实体应该对扩展开放，对修改封闭。 更改封闭即是在我们对模块进行扩展时，勿需对源有程序代码和DLL进行修改或重新编译文件！这个原则对我们在设计类的时候很有帮助，坚持这个原则就必须尽量考虑接口封装，抽象机制和多态技术！ 3、里氏替换原则（LSP） 在对象 x 为类型 T 时 q(x) 成立，那么当 S 是 T 的子类时，对象 y 为类型 S 时 q(y) 也应成立。（即对父类的调用同样适用于子类） 4、依赖倒置原则（DIP） 高层次的模块不应该依赖于低层次的模块，他们都应该依赖于抽象。具体实现应该依赖于抽象，而不是抽象依赖于实现。 可以这样理解，上面我举例子的时候先说了兔子和绵羊，然后才推出食草动物。但如果我们继续认识了牛、马等食草动物，我们会发现我们需要不断调整食草动物的描述，这样程序会变得僵化，所以我们 不应该让子类依赖于实体，不应该让父类模块依赖于子类模块。所以我们需要将食草动物设计为抽象类，即抽象类或接口。这样下层只需要实现相应的细节而不会影响父类。 5、接口隔离原则（ISP） 不应强迫客户端实现一个它用不上的接口，或是说客户端不应该被迫依赖它们不使用的方法，使用多个专门的接口比使用单个接口要好的多！ 比如，为了减少接口的定义，将许多类似的方法都放在一个接口中，最后会发现，维护和实现接口的时候花了太多精力，而接口所定义的操作相当于对客户端的一种承诺，这种承诺当然是越少越好， 越精练越好，过多的承诺带来的就是你的大量精力和时间去维护！ 这些基本原则需要我们在使用面向对象编程中慢慢领会、总结。","categories":[],"tags":[]},{"title":"Java基础知识总结","slug":"Java基础知识总结","date":"2019-08-21T04:02:29.000Z","updated":"2019-08-21T05:12:57.208Z","comments":true,"path":"2019/08/21/Java基础知识总结/","link":"","permalink":"http://yoursite.com/2019/08/21/Java基础知识总结/","excerpt":"","text":"1.Java的跨平台原理 由于各操作系统支持的指令集不是完全一致的，就会让我们的程序在不同操作系统上执行不同的代码。Java开发了适用于 不同操作系统及位数的Java虚拟机来屏蔽各个操作系统之间的差异，提供统一的接口，对于我们Java开发者而言，你只需 要在不同的系统上安装对应的Java虚拟机，这时你的Java程序只要遵循Java规范，就可以在所有的操作系统上面运行程序了 2.Java的基本数据类型，各占几个字节以及各自的封装类型都是什么 boolean： 一位（0和1） Boolean byte： 一个字节 Byte short： 两个字节 Short char： 两个字节 Character int： 四个字节 Integer float： 四个字节 Float long： 八个字节 Long double： 八个字节 Double3.已经有基本数据类型了，为什么还要设计数据的封装类型 封装是由Java是面向对象程序设计语言的性质决定的，因为面向对象程序设计语言的三大特性之一就是封装。 至于为什么需要封装，因为面向对象中所有的实体都是以对象为基本单位的，以宏观世界的实体来映射到计算机世界中， 每个对象有它自己的属性和自己的行为，我们用类来将这些属性和行为封装到一起，当它实例化出来一个对象的时候， 我们可以说这个对象具有这些属性和行为。不同类别的对象正是因为这些特性的不同，我们才可以将它们区分开， 而这也正反映了我们现实生活中不同种类个体的不同。 而且在实际应用中，基本数据类型有局限性，比如创建一个用户实体类，字段ID为整形，如果某人ID为空，则int就不好表示， 因为int只有数字，而封装类型为空时可以用null表示，这样判断时只需要判断是否为空即可，而int还要进行是否为零等一系列的判断4.面向对象的三大基本特征和五大基本原则（具体内容见） 三大基本特征：封装，继承，和多态 五大基本原则：单一职责，开放封闭，里式替换，依赖倒置，接口隔离","categories":[],"tags":[]},{"title":"JDK下载与安装","slug":"JDK下载与安装","date":"2019-08-21T02:32:18.000Z","updated":"2019-08-21T03:42:01.614Z","comments":false,"path":"2019/08/21/JDK下载与安装/","link":"","permalink":"http://yoursite.com/2019/08/21/JDK下载与安装/","excerpt":"","text":"1.JDK下载地址：http://www.oracle.com/technetwork/java/javase/downloads/index.html 点开链接你应该看到如下图所示的界面： 2点击上图中箭头所指的地方，会出现下面的这个界面，此时你需要根据你的电脑系统来进行对应的版本进行选择，在选择版本和下载之前你需要首先接收协议，具体界面如下图所示： 3.双击以后进行JDK的安装（记得按照第二幅图修改一下安装路径，不要什么东西都安装到系统盘。。。）：（1）双击进行安装界面如下所示： 4.安装完成后，需要进行环境变量的配置，右键我的电脑—属性—-高级系统设置就会看到下面的界面： 5.点击上图中的环境变量，然后开始环境变量的配置：（1）点击系统变量下面的新建按钮，变量名JAVA_HOME（代表你的JDK安装路径），值对应的是你的JDK的安装路径。 （2）继续在系统变量里面新建一个CLASSPATH变量，其变量值如下图所示： 此处需要注意：最前面有一个英文状态下的小圆点。。。。很多初学者在配置环境变量的时候就会跌倒在这个坑里。（3）在你的系统变量里面找一个变量名是PATH的变量，需要在它的值域里面追加一段如下的代码： %JAVA_HOME%\\bin;%JAVA_HOME%\\jre\\bin;1此时你应该在你原有的值域后面追加，记得在原有的值域后面记得添加一个英文状态下的分号。最后点击确定，此时JDK的环境变量配置就完成了。 6.测试自己所配置的环境变量是否正确（1）WINDOWS+R键，输入cmd，进入命令行界面，如下所示： （2）输入java -version命令，可以出现如下图的提示，你可以看你安装的JDK版本。 （3）输入javac命令可以出现如下的提示： （4）输入java命令就会出现如下图所示的结果 7.写一段代码可以验证一下（1）我在E盘新建了一个文件夹叫javafile，在里面有一个Java文件，名字叫TestJava.java，此时需要注意，你的文件名字后缀一定是.java（2）你需要在你的文件里面写下面的代码： 3）继续windows+r键进入dos命令行，你需要首先进入你java文件所在的目录，然后分别使用javac命令对你的java文件进行编译，然后使用java命令来解析你的javac命令编译的结果，就会如下图所示这样： 此处一定要注意：必须进入文件所在的目录；其次使用javac命令 文件的名字的后面一定要跟着.java的文件后缀；使用java命令时.java后缀可以不用写。当你执行完javac命令如果没有错误提示，说明通过了编译，就会在你的文件目录下生成一个同名的.class文件。","categories":[],"tags":[]}]